name: GitHub Actions CI/CD

# 동작 조건 설정 : main 브랜치에 push 혹은 pull request가 발생할 경우 동작
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 코드의 내용을 이 파일을 실행하여 action을 수행하는 주체(Github Actions에서 사용하는 VM)가 읽을 수 있도록 허용
permissions:
  contents: read

# 위 이벤트 발생 시 실행될 작업들
jobs:
  build-docker-image:
    # VM의실행 환경 지정 => ubuntu 최신 버전에서 script를 실행
    runs-on: ubuntu-latest  

    # 실행될 jobs를 순서대로 명시
    steps:
    # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
    - uses: actions/checkout@v4

    # 1. JDK 17 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 2. Github secrets로부터 데이터를 받아서, 워크 플로우에 파일을 생성
    - name: Make application.yml
      run: |
         cd ./src/main/resources
         touch ./application.yml
         echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
      shell: bash	 

    # 3. gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # 4. Spring Boot 애플리케이션 Gradle 빌드    
    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew clean build --exclude-task test

    # 5. Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/wam-image .

    # 6. DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PW }}

    # 7. Docker Hub 이미지 push
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/wam-image
      
  # 위 과정에서 푸시한 이미지를 ec2에서 pull 받아서 실행시키는 과정 
  run-docker-image-on-ec2:
    # build-docker-image (위)과정이 완료되어야 실행
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지를 pull 받음
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/wam-image
      
      # 2. 기존의 컨테이너 중지
      - name: docker stop container
        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      # 3. 최신 이미지를 컨테이너화하여 실행
      - name: docker run new container
        run: sudo docker run --name spring --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/wam-image

      # 4. 미사용 이미지 정리
      - name: delete old docker image
        run: sudo docker system prune -f
